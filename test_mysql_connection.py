#!/usr/bin/env python
"""
Script para testar a conex√£o MySQL do projeto Encanto √çntimo.

Este script verifica:
1. Conectividade b√°sica com MySQL
2. Configura√ß√µes do Django
3. Migra√ß√µes aplicadas
4. Integridade dos dados

Uso:
    python test_mysql_connection.py
"""

import os
import sys
import django
from decouple import config

def testar_configuracoes_env():
    """Testa se as configura√ß√µes do .env est√£o corretas"""
    print("üîç Verificando configura√ß√µes do .env...")
    
    required_vars = ['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST', 'DB_PORT']
    missing_vars = []
    
    for var in required_vars:
        value = config(var, default=None)
        if not value:
            missing_vars.append(var)
        else:
            # Mascarar senha na sa√≠da
            if var == 'DB_PASSWORD':
                print(f"‚úÖ {var}: {'*' * len(value)}")
            else:
                print(f"‚úÖ {var}: {value}")
    
    if missing_vars:
        print(f"‚ùå Vari√°veis faltando no .env: {missing_vars}")
        return False
    
    return True

def testar_mysql_direto():
    """Testa conex√£o direta com MySQL"""
    try:
        import mysql.connector
        from mysql.connector import Error
        
        print("üîç Testando conex√£o direta com MySQL...")
        
        connection = mysql.connector.connect(
            host=config('DB_HOST', default='localhost'),
            port=config('DB_PORT', default=3306, cast=int),
            user=config('DB_USER', default='encanto_admin'),
            password=config('DB_PASSWORD', default=''),
            database=config('DB_NAME', default='db_encanto')
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            cursor.execute("SELECT VERSION()")
            version = cursor.fetchone()
            print(f"‚úÖ MySQL conectado! Vers√£o: {version[0]}")
            
            # Testar charset
            cursor.execute("SELECT @@character_set_database, @@collation_database")
            charset_info = cursor.fetchone()
            print(f"‚úÖ Charset: {charset_info[0]}, Collation: {charset_info[1]}")
            
            cursor.close()
            connection.close()
            return True
            
    except ImportError:
        print("‚ö†Ô∏è mysql-connector-python n√£o est√° instalado")
        print("   Tentando com mysqlclient...")
        return True  # Continuar com Django
        
    except Error as e:
        print(f"‚ùå Erro na conex√£o MySQL: {e}")
        return False

def testar_django_mysql():
    """Testa conex√£o Django com MySQL"""
    try:
        print("üîç Testando conex√£o Django com MySQL...")
        
        # Configurar Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'encanto_intimo.settings.dev')
        django.setup()
        
        from django.db import connection
        from django.core.management import call_command
        
        # Testar conex√£o
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        if result:
            print("‚úÖ Django conectado ao MySQL!")
            
            # Informa√ß√µes da conex√£o
            db_info = connection.get_connection_params()
            print(f"‚úÖ Banco: {db_info.get('database', 'N/A')}")
            print(f"‚úÖ Host: {db_info.get('host', 'N/A')}")
            print(f"‚úÖ Porta: {db_info.get('port', 'N/A')}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o Django: {e}")
        return False

def verificar_migracoes():
    """Verifica status das migra√ß√µes"""
    try:
        print("üîç Verificando migra√ß√µes...")
        
        from django.core.management import call_command
        from io import StringIO
        import sys
        
        # Capturar sa√≠da do comando
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        
        try:
            call_command('showmigrations', '--plan')
            output = sys.stdout.getvalue()
        finally:
            sys.stdout = old_stdout
        
        # Contar migra√ß√µes
        lines = output.strip().split('\n')
        applied = len([line for line in lines if '[X]' in line])
        total = len([line for line in lines if '[' in line])
        
        print(f"‚úÖ Migra√ß√µes: {applied}/{total} aplicadas")
        
        if applied < total:
            print("‚ö†Ô∏è Existem migra√ß√µes pendentes!")
            print("   Execute: python manage.py migrate")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√µes: {e}")
        return False

def verificar_tabelas():
    """Verifica se as tabelas principais existem"""
    try:
        print("üîç Verificando tabelas...")
        
        from django.db import connection
        
        # Lista de tabelas esperadas
        expected_tables = [
            'auth_user',
            'django_session',
            'django_migrations',
            'usuarios_perfilusuario',
            'produtos_produto',
            'produtos_categoria',
            'pedidos_pedido',
            'carrinho_carrinho'
        ]
        
        cursor = connection.cursor()
        cursor.execute("SHOW TABLES")
        existing_tables = [table[0] for table in cursor.fetchall()]
        
        found_tables = []
        missing_tables = []
        
        for table in expected_tables:
            if table in existing_tables:
                found_tables.append(table)
            else:
                missing_tables.append(table)
        
        print(f"‚úÖ Tabelas encontradas: {len(found_tables)}")
        for table in found_tables:
            print(f"   ‚úì {table}")
        
        if missing_tables:
            print(f"‚ö†Ô∏è Tabelas faltando: {len(missing_tables)}")
            for table in missing_tables:
                print(f"   ‚úó {table}")
        
        return len(missing_tables) == 0
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabelas: {e}")
        return False

def testar_operacoes_basicas():
    """Testa opera√ß√µes b√°sicas no banco"""
    try:
        print("üîç Testando opera√ß√µes b√°sicas...")
        
        from django.contrib.auth.models import User
        from django.db import transaction
        
        # Testar consulta
        user_count = User.objects.count()
        print(f"‚úÖ Consulta: {user_count} usu√°rios encontrados")
        
        # Testar transa√ß√£o (sem commit)
        with transaction.atomic():
            # Criar usu√°rio tempor√°rio
            test_user = User(
                username=f'test_user_temp',
                email='test@test.com'
            )
            test_user.save()
            
            # Verificar se foi salvo
            exists = User.objects.filter(username='test_user_temp').exists()
            print(f"‚úÖ Transa√ß√£o: usu√°rio tempor√°rio {'criado' if exists else 'n√£o criado'}")
            
            # Reverter transa√ß√£o
            raise Exception("Rollback intencional")
        
    except Exception as e:
        if "Rollback intencional" in str(e):
            print("‚úÖ Rollback: transa√ß√£o revertida com sucesso")
            return True
        else:
            print(f"‚ùå Erro em opera√ß√µes b√°sicas: {e}")
            return False

def main():
    """Fun√ß√£o principal"""
    print("üîç Teste de Conex√£o MySQL - Encanto √çntimo")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 6
    
    # Teste 1: Configura√ß√µes .env
    if testar_configuracoes_env():
        tests_passed += 1
    print()
    
    # Teste 2: Conex√£o MySQL direta
    if testar_mysql_direto():
        tests_passed += 1
    print()
    
    # Teste 3: Conex√£o Django
    if testar_django_mysql():
        tests_passed += 1
    print()
    
    # Teste 4: Migra√ß√µes
    if verificar_migracoes():
        tests_passed += 1
    print()
    
    # Teste 5: Tabelas
    if verificar_tabelas():
        tests_passed += 1
    print()
    
    # Teste 6: Opera√ß√µes b√°sicas
    if testar_operacoes_basicas():
        tests_passed += 1
    print()
    
    # Resultado final
    print("=" * 50)
    print(f"üìä Resultado: {tests_passed}/{total_tests} testes passaram")
    
    if tests_passed == total_tests:
        print("üéâ Todos os testes passaram! MySQL configurado corretamente.")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Execute: python manage.py runserver")
        print("2. Acesse: http://localhost:8000")
    else:
        print("‚ùå Alguns testes falharam. Verifique as mensagens acima.")
        print("\nüîß Poss√≠veis solu√ß√µes:")
        print("1. Verificar se MySQL est√° rodando")
        print("2. Verificar credenciais no .env")
        print("3. Executar: python setup_mysql.py")
        print("4. Executar: python manage.py migrate")

if __name__ == "__main__":
    main()
