# ==========================================
# GITIGNORE PARA PROJETO DJANGO - ENCANTO ÍNTIMO
# ==========================================

# ==========================================
# PYTHON
# ==========================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ==========================================
# DJANGO
# ==========================================

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
staticfiles/
static_root/

# Media files (uploads de usuários)
media/
media_root/

# Django migrations (comentar se quiser versionar)
# */migrations/*.py
# !*/migrations/__init__.py

# Django secret key
.secret_key

# Django settings locais
local_settings.py
settings_local.py

# ==========================================
# BANCO DE DADOS
# ==========================================

# SQLite
*.sqlite3
*.sqlite3-journal
*.sqlite
*.db

# PostgreSQL
*.pgsql
*.sql

# MySQL
*.mysql

# ==========================================
# ARQUIVOS DE CONFIGURAÇÃO SENSÍVEIS
# ==========================================

# Variáveis de ambiente
.env
.env.local
.env.development
.env.test
.env.production
.env.staging
.env.dev
.env.prod

# Configurações locais
config.ini
config.local.ini
settings.ini
secrets.json

# Chaves de API
api_keys.py
keys.py
credentials.json
service-account-key.json

# ==========================================
# LOGS
# ==========================================

# Log files
*.log
logs/
log/
django.log
gunicorn.log
nginx.log
celery.log

# ==========================================
# CACHE
# ==========================================

# Django cache
cache/
django_cache/

# Redis
dump.rdb

# Memcached
*.mc

# ==========================================
# SESSÕES
# ==========================================

# Django sessions
django_sessions/

# ==========================================
# ARQUIVOS DE BACKUP
# ==========================================

# Backups
backups/
backup/
*.backup
*.bak
*.sql.gz
*.dump

# ==========================================
# EDITORES E IDEs
# ==========================================

# Visual Studio Code
.vscode/
.history/

# PyCharm
.idea/
*.iml
*.ipr
*.iws

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# ==========================================
# SISTEMA OPERACIONAL
# ==========================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ==========================================
# NODE.JS (para assets frontend)
# ==========================================

# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env.test

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# ==========================================
# ARQUIVOS ESPECÍFICOS DO PROJETO
# ==========================================

# Certificados SSL
*.crt
*.key
*.pem
*.cert
*.p12
*.pfx

# Dumps de dados
fixtures/
datadump/
*.json.gz

# Arquivos de teste
test_files/
test_data/
test_media/

# Documentação temporária
docs/_build/
docs/.doctrees/

# Configurações do servidor
nginx.conf.local
apache.conf.local
gunicorn.conf.local

# Scripts de deploy personalizados
deploy_local.sh
deploy_local.py

# ==========================================
# ARQUIVOS TEMPORÁRIOS
# ==========================================

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*.bak
*.orig

# Thumbnails
*.thumb

# ==========================================
# DEPENDÊNCIAS LOCAIS
# ==========================================

# Local dependencies
vendor/
lib/

# ==========================================
# FERRAMENTAS DE BUILD
# ==========================================

# Webpack
webpack-stats.json
webpack-stats-*.json

# Sass
.sass-cache/
*.css.map

# ==========================================
# DOCKER
# ==========================================

# Docker
.dockerignore
docker-compose.override.yml
docker-compose.local.yml

# ==========================================
# MONITORAMENTO E ANALYTICS
# ==========================================

# Sentry
.sentryclirc

# New Relic
newrelic.ini

# ==========================================
# ARQUIVOS DE EXEMPLO
# ==========================================

# Manter apenas templates de exemplo
!.env.example
!config.example.ini
!settings.example.py

# ==========================================
# COMENTÁRIOS IMPORTANTES
# ==========================================

# Este arquivo .gitignore cobre:
# ✅ Arquivos Python e Django
# ✅ Bancos de dados locais
# ✅ Arquivos de configuração sensíveis
# ✅ Logs e cache
# ✅ Arquivos de mídia e uploads
# ✅ Configurações de editores
# ✅ Arquivos do sistema operacional
# ✅ Dependencies do Node.js (se usar)
# ✅ Certificados e chaves
# ✅ Backups e dumps

# Lembre-se de:
# 1. Manter .env.example versionado
# 2. Documentar variáveis de ambiente necessárias
# 3. Fazer backup dos dados importantes antes de commits
# 4. Revisar este arquivo periodicamente
